name: CI/CD Pipe

on:
  push:
    branches: [ "deploy" ]
  pull_request:
    branches: [ "deploy" ]

jobs:
  build-image:
    name: BUILD SPRING DOCKER IMANGE
    runs-on: ubuntu-latest
    env:
      RELEASE_VERSION: latest-v16
      DOCKER_USER_NAME: whdnseowkd
      DOCKER_REPOSITORY_NAME: algo-mi-api

    steps:
      - uses: actions/checkout@v4
      - name: SET UP JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: CREATE PROPERTIES FILE
        env:
          APPLICATION_PROD_PROPERTIES_CONTENT: ${{ secrets.APPLICATION_PROD_PROPERTIES_CONTENT }}
        run: echo "$APPLICATION_PROD_PROPERTIES_CONTENT" > ./src/main/resources/application-prod.properties

      - name: SETUP GRADLE
        uses: gradle/actions/setup-gradle@ec92e829475ac0c2315ea8f9eced72db85bb337a

      - name: BUILD WITH GRADLE WRAPPER
        run: ./gradlew build

      - name: LOGIN TO DOCKER HUB
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: TAGS FOR DOCKER
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.DOCKER_USER_NAME }}/${{ env.DOCKER_REPOSITORY_NAME }} # 추후 env 로 변경

      - name: DOCKER IMAGE BUILD AND PUSH
        uses: docker/build-push-action@3b5e8027fcad23fda98b2e3ac259d8d67585f671
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_USER_NAME }}/${{ env.DOCKER_REPOSITORY_NAME }}:${{ env.RELEASE_VERSION }} # 도커 테그 버전, 추후 env 로 변경

  deploy-docker-image:
    needs: build-image # build-image 작업 이후에 실행
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: DEPLOY TO EC2
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          HOSTNAME: ${{secrets.SSH_HOST}}
          USER_NAME: ${{secrets.USER_NAME}}

        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
              # Now we have got the access of EC2 and we will start the deploy .
              echo ACCESS SUCCESS
              echo ${{ needs.build-image.outputs.RELEASE_VERSION }}
              echo ACCESS SUCCESS
              echo ${{ needs.build-image.env.RELEASE_VERSION }}
              echo ACCESS SUCCESS
              ./deploy-api.sh ${{ needs.build-image.env.RELEASE_VERSION }}  # 도커 테그 버전, 추후 env 로 변경
              '